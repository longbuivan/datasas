apiVersion: apps/v1
kind: Deployment
metadata:
  name: nifi
  namespace: default
  labels:
    app.kubernetes.io/name: nifi
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nifi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nifi
    spec:
    #   affinity:
    #     podAntiAffinity:
    #       requiredDuringSchedulingIgnoredDuringExecution:
    #         - labelSelector:
    #             matchExpressions:
    #               - key: "app.kubernetes.io/name"
    #                 operator: In
    #                 values:
    #                 - nifi
    #           topologyKey: "kubernetes.io/hostname"
      restartPolicy: Always    
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: false
        seccompProfile:
          type: RuntimeDefault
      # initContainers:
      #   - name: init
      #     image: docker.io/busybox:1.35
      #     volumeMounts:
      #     - name: flow-xml
      #       mountPath: /opt/nifi/nifi-current
      #     command: ["sh", "-c", "chown -R 1000:1000 /opt/nifi/nifi-current"] #or whatever you want to do as root
      containers:
      - name: nifi
        image: apache/nifi:1.13.2
        resources:
          limits:
            memory: 2Gi
            cpu: 500m
        ports:
        - containerPort: 8080
        - containerPort: 8081
        - containerPort: 8443
        - containerPort: 2882
        env:
          - name: SINGLE_USER_CREDENTIALS_USERNAME
            value: "nifi"
          - name: SINGLE_USER_CREDENTIALS_PASSWORD
            value: "nifi123"
          - name: NIFI_WEB_HTTP_PORT
            value: "8080"
          - name: NIFI_WEB_HTTPS_PORT
            value: "8443"
        - name: NIFI_CLUSTER_IS_NODE
          value: "true"
        - name: NIFI_CLUSTER_NODE_PROTOCOL_PORT
          value: "9088"
        - name: NIFI_ELECTION_MAX_CANDIDATES
          value: "1"
        - name: NIFI_ZK_CONNECT_STRING
          value: "zk-0.zk-hs.default.svc.cluster.local:2181,zk-1.zk-hs.default.svc.cluster.local:2181,zk-2.zk-hs.default.svc.cluster.local:2181"
        volumeMounts:
          - name: flow-xml
            mountPath: /opt/nifi/nifi-current/data
            subPath: data
            readOnly: false
        livenessProbe:
          exec:
            command:
              - pgrep
              - java
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - pgrep
              - java
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          requests:
            cpu: 300m
            memory: 1Gi
          limits:
            cpu: 500m
            memory: 2Gi
        # securityContext:
        #   allowPrivilegeEscalation: false
        #   privileged: false
        #   capabilities:
        #     drop:
        #       - ALL
        #     add:
        #       - NET_BIND_SERVICE
      volumes:
        - name: flow-xml
          emptyDir:
            sizeLimit: 5Gi
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nifi-http
# spec:
#   type: LoadBalancer
#   selector:
#     app.kubernetes.io/name: nifi
#   ports:
#     - protocol: TCP
#       port: 8080
#       targetPort: 8080
#       name: nifi
---
kind: Service
apiVersion: v1
metadata:
  name: nifi-service
spec:
  # clusterIP: None
  selector:
    app.kubernetes.io/name: nifi
  type: LoadBalancer
  ports:
    # - protocol: TCP
    #   port: 8081
    #   targetPort: 8081
    #   name: nifi-listen-http
    # - protocol: TCP
      - port: 8443
        targetPort: 8443
        # name: nifi
    # - protocol: TCP
    #   port: 2881
    #   targetPort: 2881
    #   name: nifi-site-protocol
    # - protocol: TCP
    #   port: 2882
    #   targetPort: 2882
    #   name: nifi-node-protocol
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nifi
  # namespace: default
  labels:
    name: nifi
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/configuration-snippet: | 
      rewrite ^(/dashboard)$ $1/ redirect;
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    kubernetes.io/ingress.class: public
    # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    # nginx.ingress.kubernetes.io/affinity-mode: persistent
    # nginx.ingress.kubernetes.io/affinity: "cookie"
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/upstream-vhost: "localhost:8443"
    nginx.ingress.kubernetes.io/proxy-redirect-from: "https://localhost:8443"
    nginx.ingress.kubernetes.io/proxy-redirect-to: "https://nifi.datasas.io"
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: nifi-basic-auth
    # nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    # nginx.ingress.kubernetes.io/configuration-snippet: |
      # server_tokens off;
      # proxy_set_header X-Forwarded-Proto https;
      # proxy_set_header X-Forwarded-Port 443;
spec:
  tls:
  - hosts:
    - nifi.datasas.io
    secretName: nifi-secret-tls
  rules:
  - host: "nifi.datasas.io"
    http:
      paths:
      - path: /nifi(/|$)(.*)
        pathType: Prefix
        backend:
            service:
              name: nifi-service
              port:
                number: 8443
# ---
# apiVersion: v1
# kind: Secret
# type: Opaque
# metadata:
#   name: nifi-secret-tls
#   labels:
#     app: nifi
#   annotations:
#     app.kubernetes.io/name: nifi
#     app.kubernetes.io/part-of: nifi
# data:
#   auth: YWRtaW46JGFwcjEkSDY1dnBkTU8kMXAxOGMxN3BuZVFUT2ZjVC9TZkZzMQo=